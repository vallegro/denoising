	


diff --git a/Functions/KernelLoop.m b/Functions/KernelLoop.m
index 56c9012..1d0412e 100644
--- a/Functions/KernelLoop.m
+++ b/Functions/KernelLoop.m
@@ -22,13 +22,10 @@ while i <= 5,
     num_anchor = sum(sum(g_kernel_temp>0.05));
     if num_anchor >= num_anchor_old,
         num_anchor_old = num_anchor;
-        i = i+1;
         kernel = g_kernel;
         %fprintf('%d %d\n',thre,num_anchor);
-    else
-        %fprintf('*%d %d\n',thre,num_anchor);
-        break;
     end
+    i=i+1;
 end
 
 end
diff --git a/Functions/SKheter.m b/Functions/SKheter.m
index b1124d3..3a4d5c6 100644
--- a/Functions/SKheter.m
+++ b/Functions/SKheter.m
@@ -1,11 +1,9 @@
-function[g_kernel] =  SKheter( im , im_seed, align)
+function[g_kernel] =  SKheter(im_seed, align)
 
-
-im = EdgeMirror(im, [align/2 , align/2]);
 im_seed = EdgeMirror(im_seed , [align/2 , align/2]);
 
 
-im_size = size(im);
+im_size = size(im_seed);
 % parameters of pilot estimation by second order classic kernel regression
 h_c = 0.5;    % the global smoothing parameter
 r = 1;      % the upscaling factor
diff --git a/Functions/SKheterSingle.m b/Functions/SKheterSingle.m
new file mode 100644
index 0000000..a45c59f
--- /dev/null
+++ b/Functions/SKheterSingle.m
@@ -0,0 +1,43 @@
+function[g_kernel] =  SKheterSingle(im_seed, align, i, j)
+
+
+i = i + align/2 ;
+j = j + align/2 ;
+
+im_seed = EdgeMirror(im_seed , [align/2 , align/2]);
+
+im_size = size(im_seed);
+% parameters of pilot estimation by second order classic kernel regression
+h_c = 0.5;    % the global smoothing parameter
+r = 1;      % the upscaling factor
+ksize_c = 5;  % the kernel size
+
+% iteartive steering kernel regression (second order)
+wsize = 11;  % the size of the local orientation analysis window %%not radius
+lambda = 1;  % the regularization for the elongation parameter
+alpha = 0.5; % the structure sensitive parameter
+h = 2.4;     % the global smoothing parameter
+ksize = align*2+1;  % the kernel size %%not radius
+% z = zeros(N, M, IT+1);
+% zx1 = zeros(N, M, IT+1);
+% zx2 = zeros(N, M, IT+1);
+% rmse = zeros(IT+1, 1);
+% z(:,:,1) = y;
+% zx1(:,:,1) = zx1c;
+% zx2(:,:,1) = zx2c;
+% error = img - y;
+% rmse(1) = sqrt(mymse(error(:)));
+
+ 
+n_size= wsize+ksize-1;
+n_radius = (n_size-1)/2;
+wradius = (wsize-1)/2;
+y = EdgeMirror(im_seed , [n_radius , n_radius]);
+
+fprintf('---- %d, %d ----\n', i, j);
+
+y_nei = y(i:i+n_size-1 , j:j+n_size-1);
+g_kernel = KernelLoop( y_nei , h_c , r , ksize_c , ...
+    n_size , wsize, lambda , alpha , h ,ksize , wradius);
+        
+
diff --git a/Functions/ShowKernel.m b/Functions/ShowKernel.m
deleted file mode 100644
index a1734d2..0000000
--- a/Functions/ShowKernel.m
+++ /dev/null
@@ -1,8 +0,0 @@
-function [  ] = ShowKernel( g_kernel,y,x )
-%SHOWKERNEL Summary of this function goes here
-%   Detailed explanation goes here
-
-imtool(uint8(reshape(g_kernel(y,x,1:17,1:17),17,17)/max(max(g_kernel(y,x,1:17,1:17)))*255));
-
-end
-
diff --git a/Functions/ViewBlockInDetail.m b/Functions/ViewBlockInDetail.m
new file mode 100644
index 0000000..aad490c
--- /dev/null
+++ b/Functions/ViewBlockInDetail.m
@@ -0,0 +1,11 @@
+block_ind = [9,3];
+ksize = align*2+1;
+
+
+block = im((block_ind(1)-1)*align+1 : block_ind(1)*align , ...
+           (block_ind(2)-1)*align+1 : block_ind(2)*align);
+
+kernels_in_block(1:align, 1:align, 1:ksize, 1:ksize)...
+    = g_kernel(  (block_ind(1)-1)*align+1 : block_ind(1)*align , ...
+                 (block_ind(2)-1)*align+1 : block_ind(2)*align , ...
+                 :,:); 
\ No newline at end of file


+++ b/testworkDec13.m
@@ -0,0 +1,15 @@
+align = 8;
+bsize = align*3; 
+ksize = 2*align +1;
+
+load('testblocks.mat');
+
+% add white Gaussian noise
+
+for i = 1:10,
+    seed = double(test(1:bsize, (i-1)*bsize+1:i*bsize));
+    g_kernel = SKheter(seed, 8);
+
+    file_name = strcat('g_kernel_',datestr(clock),'.mat');
+    save(file_name,'g_kernel');
+end

--- a/work.m
+++ b/work.m
@@ -1,20 +1,34 @@
+clear all
+a1 = 416;
+b1 = 255;
+edge_len = 40;
+a2 = a1 + edge_len - 1;
+b2 = b1 + edge_len - 1;
+
+align = 8;
+ksize = 2*align +1;
+
 % load image
-im = double(imread('/home/vallegro/space/Resources/lena.pgm'));
-im = im(197:284,197:284);
+img = double(imread('/home/vallegro/space/Resources/lena.pgm'));
+img_size = size(img);
+
+% add white Gaussian noise
+sigma = 25;        % standard deviation
+randn('state', 0); % initialization
+y_noise = round0_255(img + randn(img_size) * sigma);
+
+im = img(a1 : a2 , b1 : b2);
 im_size = size(im);
 
+y_noise = y_noise(a1 : a2 , b1 : b2);
+
 load('results/SKResult17');
 
 seed(1:512 , 1:512) = z(:,:,13);
-seed = seed(197:284,197:284);
+seed = seed(a1 : a2 , b1 : b2);
 
 
-% add white Gaussian noise
-sigma = 25;        % standard deviation
-randn('state', 0); % initialization
-y_noise = round0_255(im + randn(size(im)) * sigma);
-
-g_kernel = SKheter(y_noise , seed, 8);
+g_kernel = SKheter(seed, 8);
 
 file_name = strcat('g_kernel_',datestr(clock),'.mat');
 save(file_name,'g_kernel');
@@ -22,7 +36,7 @@ save(file_name,'g_kernel');
 lambda = 0.4:0.1:1.8;
 len = length(lambda);
 
-align = 8;
+
 
 res0 = zeros([im_size len]);
 res1 = zeros([im_size+align len]);
